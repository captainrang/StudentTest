<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.classTest.student.dao.UserDao">
<select id="getUserInfo" parameterType="map" resultType="map">
    select * from student where 1=1 <if test="sno !='' and sno!=null"> sno = #{sno}</if>
</select>

    <select id="getLoginUserInfo" resultType="map">
        <if test="usertype == 1">
            select s.* ,cs.id as classId,cs.name as className
            from student s join user_class uc on s.id = uc.userId and type = 0  join class cs
            on cs.id = uc.classId
            where username=#{username} and password = #{password} and is_delete=0
        </if>
        <if test="usertype == 2">
            select s.* ,cs.id as classId,cs.name as className
            from teacher s join user_class uc on s.id = uc.userId and type = 1 join class cs
            on cs.id = uc.classId
            where username=#{username} and password = #{password} and is_delete=0
        </if>
    </select>
    <select id="queryTest" resultType="map">
        select id,title from task_type where end_date &lt; now()
    </select>
	<!-- > DATE_ADD(
	str_to_date(
	DATE_FORMAT(NOW(), '%Y-%m-%d'),
	'%Y-%m-%d %H:%i:%s'
	),
	INTERVAL (
	SELECT
	classTime
	FROM
	class cs
	WHERE
	cs.id = #{classId}
	) HOUR
	)-->
    <select id="tj" resultType="map">
       SELECT
	t.reached,
	t.targetReach,
	CONCAT(FORMAT(t.reached / (
			CASE
			WHEN t.targetReach = 0 THEN
				1
			ELSE
				t.targetReach
			END
		),2)*100 ,'%')  AS reachpercent
FROM
	(
		SELECT
			count(1) targetReach,
			count(
				sed.gmt_create
			) AS reached
		FROM
			student s
		JOIN user_class uc ON uc.userId = s.id and uc.type = 0
		LEFT JOIN signed sed ON sed.stuId = s.id and date_format(sed.gmt_create,'%Y-%m-%d') = CURDATE()
		WHERE
			1 = 1
		AND uc.classId = #{classId}

	) t
    </select>

	<select id="getZxTest" resultType="map">
        select id,title from task_type where 1=1 order by end_date desc limit 0,1;
    </select>

	<select id="isnotSign" resultType="java.lang.Long">
		select count(1) from signed where date_format(gmt_create,'%Y-%m-%d') = CURDATE() and stuId = #{id}
	</select>


	<insert id="signed">
		insert into signed(stuId,is_sign) VALUES(#{id},1) ON DUPLICATE KEY UPDATE is_sign=1
	</insert>

	<insert id="addNewTest"  parameterType="map" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into task_type(title,user_id,begin_date,end_date,status,testTime)
		values(#{testName},#{id},now(),DATE_ADD(now(),INTERVAL #{testTime} MINUTE),1,#{testTime})
	</insert>

	<insert id="addNewQuestion1" parameterType="map" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
			insert into task_question(title,sort,task_id,type) VALUES(#{title},#{sort},#{newTestId},#{add_questionType})
	</insert>

	<insert id="addOption1" parameterType="map">
		<if test="add_questionType == 4 ||add_questionType==5">
			INSERT into task_question_option(question_id,remark) VALUES(#{id},#{add_remarks})
		</if>
		<if test="add_questionType == 1 ||add_questionType==2">
			INSERT into task_question_option(question_id,option_content) values
			<foreach collection="add_questionOption" index="index" item="item" separator=",">
				( #{id}, #{item} )
			</foreach>
		</if>
	</insert>

	<select id="getTestBaseInfo" parameterType="map" resultType="map">
	select * from task_type where id=#{newTestId}
	</select>

	<!-- 查询单个调查对应的问题 -->
	<select id="getTest" resultType="map">
	select * from task_question where task_id = #{newTestId}
	</select>

	<select id="getOptions" resultType="map">
	select * from task_question_option where question_id = #{questionId}
	</select>

	<!-- 查询单选对应的答案 -->
	<select id="getAnswers" resultType="java.lang.String" parameterType="map">
	select * from task_question_answer sqa join task_question_option sqo on sqo.id = sqa.option_id
	join task_question sq on sq.id = sqa.question_id where sqa.question_id = #{questionId} and sqa.user_id = #{logUserId} and sq.type = 1
	</select>

	<!-- 查询多选对应的答案 -->
	<select id="getCheckAnswers" resultType="java.util.Map"
	parameterType="java.util.Map"  >
	select sqa.option_id FROM task_question_answer sqa
	JOIN task_question sq ON sqa.question_id=sq.id
	where
	sqa.question_id=#{questionId} and sqa.user_id=#{logUserId}  and sq.type=2
	</select>

	<!-- 查询填空对应的答案 -->
	<select id="getInpAnswers" resultType="map"
	parameterType="map">
	select
	a.option_content,a.attachment FROM task_question_answer a
	where
	a.question_id=#{questionId} and a.user_id=#{logUserId}
	</select>

	<!-- 保存单选答案 -->
	<insert id="saveRadioAnswer" parameterType="map">
		insert into task_question_answer(
		user_id,question_id,option_id,task_id,answer_type)
		values(#{userId},#{questionId},#{optionId},#{surveyId},#{answer_type})
	</insert>

	<!-- 保存多选答案 -->
	<insert id="saveCheckboxAnswer" parameterType="map">
		INSERT INTO
		`task_question_answer`(`user_id`,`question_id`,`option_id`,`task_id`,answer_type)
		VALUES
		<foreach collection="optionIds" item="optionId" index="index" separator=",">
			( #{userId},#{questionId},#{optionId},#{surveyId},#{answer_type})
		</foreach>
	</insert>

	<!-- 保存输入框答案 -->
	<insert id="saveInputAnswer" parameterType="map">
		insert into task_question_answer
		(user_id,question_id,option_content,task_id,answer_type
		<if test="attachment !=null and attachment !=''">
			,attachment
		</if>
		)
		values(#{userId},#{questionId},#{inputValue},#{surveyId},#{answer_type}
		<if test="attachment !=null and attachment !=''">
			,#{attachment}
		</if>
		)
	</insert>

	<select id="getTeacherByClassId" resultType="map">
			select t1.* from teacher t1 left join user_class t2  on t1.id = t2.userId and type = 1
			where t2.classId = #{classId}
	</select>

	<select id="testNotEnd" resultType="boolean">
		SELECT
			CASE
		WHEN now() &lt;

		end_date THEN
			TRUE
		ELSE
			FALSE
		END AS result
		FROM
			task_type
		WHERE
			id = #{testId}
	</select>

	<select id="testNotShenYue" resultType="boolean">
		SELECT
			count(t1.student_id) &lt;

		count(t2.user_id)
		FROM
			grade t1,
			task_question_answer t2
		WHERE
			t2.answer_type = 1
		AND t1.test_id = #{testId} and t2.task_id = #{testId}
	</select>

	<select id="queryPaiMingTail" resultType="map" parameterType="map">
		SELECT
			t1.grade,
			t2.realname AS studentName,
			t3.title
		FROM
			grade t1
		LEFT JOIN student t2 ON t1.student_id = t2.id,
		 task_type t3
		WHERE
			t1.test_id = #{taskId} and t3.id=#{taskId}
			limit #{startnum},#{pageSize}
		</select>

	<select id="queryPaiMingTailCount" resultType="java.lang.Integer" parameterType="map">
		SELECT
			count(1)
		FROM
			grade t1
		LEFT JOIN student t2 ON t1.student_id = t2.id,
		 task_type t3
		WHERE
			t1.test_id = #{taskId} and t3.id=#{taskId}
	</select>
	<select id="getUserTestInfo" resultType="map" parameterType="map">
		SELECT
		t2.id as stuId,
			t2.realname AS studentName,
			cs.NAME AS className,
			t3.title AS testName
		FROM
			task_question_answer t1
		LEFT JOIN student t2 ON t1.user_id = t2.id
		JOIN user_class uc ON t2.id = uc.userId
		AND type = 0
		JOIN class cs ON cs.id = uc.classId,
		 task_type t3
		WHERE
			t3.id = #{taskId} and t1.task_id = #{taskId}
			limit #{startnum},#{pageSize}
	</select>
	<select id="getUserTestInfoCount" resultType="java.lang.Integer" parameterType="map">
		SELECT
		count(1)
		FROM
		task_question_answer t1
		LEFT JOIN student t2 ON t1.user_id = t2.id
		JOIN user_class uc ON t2.id = uc.userId
		AND type = 0
		JOIN class cs ON cs.id = uc.classId,
		task_type t3
		WHERE
		t3.id = #{taskId} and t1.task_id = #{taskId}
	</select>

	<select id="getDTL" resultType="map">
		SELECT count(t1.user_id)/count(t2.userId) from task_question_answer t1,(select * from user_class where type = 0 )t2
		where  t2.classId = (select classId from user_class t3 where type = 1 and t3.userId = #{userId})
	</select>


	<select id="getZQL" resultType="map">

	</select>

	<select id="getQuestionGrade" resultType="java.lang.Long" parameterType="map">
		SELECT
			sum(grade) grade
		FROM
			(
				SELECT
					CASE
				WHEN t3.answer_type = 1 THEN
					count(t3.option_id = t4.option_id) * 5
				WHEN t3.answer_type = 2 THEN
					count(
						t3.option_content = t4.option_content
					) * 10
				ELSE
					count(
						t3.option_content = t4.option_content
					) * 15
				END AS grade
				FROM
					(
						SELECT
							TRIM(t1.option_id) AS option_id,
							t1.question_id,
							t1.answer_type,
							t1.user_id,
							TRIM(t1.option_content) AS option_content
						FROM
							task_question_answer t1
						LEFT JOIN task_question tq1 ON t1.question_id = tq1.id
						AND tq1.type = 1
						AND t1.answer_type IN (1, 2, 4)
						AND t1.task_id = #{testId}
						and t1.user_id = #{stuId}
					) t3
				LEFT JOIN (
					SELECT
						TRIM(t2.option_id) AS option_id,
						t2.question_id,
						t2.answer_type,
						t2.user_id,
						TRIM(t2.option_content) AS option_content
					FROM
						task_question_answer t2
					LEFT JOIN task_question tq2 ON t2.question_id = tq2.id
					AND tq2.type = 1
					AND t2.answer_type IN (1, 2, 4)
					AND t1.task_id = #{testId}
					and t1.user_id = #{teacherId}
				) t4 ON t3.question_id = t4.question_id
				AND t3.answer_type != t4.answer_type
				AND t3.user_id != t4.user_id

			) t
	</select>

	<insert id="insertGrade" parameterType="map">
		INSERT into grade(test_id,student_id,grade,teacher_id) VALUES(#{testId},#{stuId},#{grade},#{teacherId})
	</insert>

	<select id="getClassList" resultType="map">
		select * from class
	</select>

	<select id="showUser" resultType="map">
		 select s.username,s.realname ,cs.id as classId,cs.name as classname,'学生' classType
            from student s join user_class uc on s.id = uc.userId and type = 0  join class cs
            on cs.id = uc.classId
            union ALL
            select s.username ,s.realname,cs.id as classId,cs.name as classname, '老师' classType
            from teacher s join user_class uc on s.id = uc.userId and type = 1 join class cs
            on cs.id = uc.classId
	</select>

	<insert id="addUserOpt" useGeneratedKeys="true"   keyProperty="id" parameterType="map">

		<if test="add_userType == 1">
			insert into student(sno,realname,username,password,sex) values(#{add_sno},#{add_realname},#{add_username},#{add_password},#{add_sex})
		</if>
		<if test="add_userType == 2">
			insert into teacher(sno,realname,username,password,sex) values(#{add_sno},#{add_realname},#{add_username},#{add_password},#{add_sex})
		</if>
	</insert>

	<insert id="insertUserClass" parameterType="map">
		INSERT into user_class(userId,classId,type) VALUES(#{id},#{add_class},#{add_userType}-1)
	</insert>

</mapper>